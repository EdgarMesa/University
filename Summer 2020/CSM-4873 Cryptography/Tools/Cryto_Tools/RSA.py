import numpy as np
from egcd import egcd
from functools import reduce
from math import sqrt
import math
def factors(n):
    return set(reduce(list.__add__,
                ([i, n//i] for i in range(2, int(n**0.5) + 1) if n % i == 0)))



def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m


# Python3 program to find primitive root
# of a given number n



# Returns True if n is prime
def isPrime(n):
    # Corner cases
    if (n <= 1):
        return False
    if (n <= 3):
        return True

    # This is checked so that we can skip
    # middle five numbers in below loop
    if (n % 2 == 0 or n % 3 == 0):
        return False
    i = 5
    while (i * i <= n):
        if (n % i == 0 or n % (i + 2) == 0):
            return False
        i = i + 6

    return True


""" Iterative Function to calculate (x^n)%p 
    in O(logy) */"""


def power(x, y, p):
    res = 1  # Initialize result

    x = x % p  # Update x if it is more
    # than or equal to p

    while (y > 0):

        # If y is odd, multiply x with result
        if (y & 1):
            res = (res * x) % p

            # y must be even now
        y = y >> 1  # y = y/2
        x = (x * x) % p

    return res


# Utility function to store prime
# factors of a number
def findPrimefactors(s, n):
    # Print the number of 2s that divide n
    while (n % 2 == 0):
        s.add(2)
        n = n // 2

    # n must be odd at this po. So we can
    # skip one element (Note i = i +2)
    for i in range(3, int(sqrt(n)), 2):

        # While i divides n, print i and divide n
        while (n % i == 0):
            s.add(i)
            n = n // i

            # This condition is to handle the case
    # when n is a prime number greater than 2
    if (n > 2):
        s.add(n)

    # Function to find smallest primitive


# root of n
def findPrimitive(n):
    s = set()

    # Check if n is prime or not
    if (isPrime(n) == False):
        return -1

    # Find value of Euler Totient function
    # of n. Since n is a prime number, the
    # value of Euler Totient function is n-1
    # as there are n-1 relatively prime numbers.
    phi = n - 1

    # Find prime factors of phi and store in a set
    findPrimefactors(s, phi)

    # Check for every number from 2 to phi
    for r in range(2, phi + 1):

        # Iterate through all prime factors of phi.
        # and check if we found a power with value 1
        flag = False
        for it in s:

            # Check if r^((phi)/primefactors)
            # mod n is 1 or not
            if (power(r, phi // it, n) == 1):
                flag = True
                break

        # If there was no power with value 1.
        if (flag == False):
            return r

            # If no primitive root found
    return -1

def isPrime(num):
    # Program to check if a number is prime or not

    # To take input from the user
    # num = int(input("Enter a number: "))

    # prime numbers are greater than 1
    if num > 1:
        # check for factors
        for i in range(2, num):
            if (num % i) == 0:
                print(num, "is not a prime number")
                print(i, "times", num // i, "is", num)
                break
        else:
            print(num, "is a prime number")

    # if input number is less than
    # or equal to 1, it is not prime
    else:
        print(num, "is not a prime number")

_1_50 = 1 << 50  # 2**50 == 1,125,899,906,842,624

# This code is contributed by
# Shubham Singh(SHUBHAMSINGH10)
def isqrt(x):
    """Return the integer part of the square root of x, even for very
    large integer values."""
    if x < 0:
        raise ValueError('square root not defined for negative numbers')
    if x < _1_50:
        return int(math.sqrt(x))  # use math's sqrt() for small parameters
    n = int(x)
    if n <= 1:
        return n  # handle sqrt(0)==0, sqrt(1)==1
    # Make a high initial estimate of the result (a little lower is slower!!!)
    r = 1 << ((n.bit_length() + 1) >> 1)
    while True:
        newr = (r + n // r) >> 1  # next estimate by Newton-Raphson
        if newr >= r:
            return r
        r = newr

def factor_n(n, e, d, primes):
    k = (e * d) - 1
    print("k = de -1 = {}".format(k))
    p  = 0

    is_done = False
    i = 0
    while not is_done and i < len(primes):
        g = primes[i]
        print("Triying g = ", g)
        t = k
        while t % 2 == 0:
            t = t // 2
            print("t = ", t)
            x = pow(g, t, n)
            print("x = g^t mod N =", x)
            if x > 1:
                x -= 1
                y = math.gcd(x, n)
                print("y = gcd(x-1, N) = ", y)
                if y > 1:
                    p = y
                    q = n // y
                    is_done = True
                    break
        i += 1
    if is_done and p > q:
        temp = p
        p = q
        q = temp

    return p, q

def f(x, n):
    return (x ** 2 + 1) % n

def  pollard_rho(n):
    x = 1
    x_prime = f(x, n)
    p = math.gcd(x - x_prime, n)

    iteration = 0
    while p == 1:
        iteration += 1
        x = f(x, n)
        x_prime = f(x_prime, n)
        x_prime = f(x_prime, n)
        p = math.gcd(x - x_prime, n)

    if p == n:
        print("Failure")
    else:
        return p, iteration



if __name__=="__main__":
    # Driver Code
    n = 15485927
    #n = 13
    print("Smallest primitive root of",
          n, "is", findPrimitive(n))
    print("----------------------------------------------------")

    n1 = 150749696333863362909437082258711118731971263930520912723345616180841808453671890034116051160548859847164803034949171657982949652001550108648280002264030350802457427277712307294760589649359833302870090330583459581005196047754804266335756252356084174912463569238403243170913769351560941715955883358416435025534616155944640327128316046731948678851600142280007790094474738644284643236248302596847946955899251630579642127317601239140819104454926621845624329619440532820426037517533325944751976345124197205732111173138980713334481957082773587443795088071579311396103995412871376819641997225532158625135074781958003513832490146057575812010331459290447577900576945097395783985395693873364866540982638843291329095754824911561208547913571423808032685937147434969031484582783127665456538878700471549248372248660121594961447140451530642019402545788082739093059137912016349268319928411651090454511004033312303882453893195362190543555551519664016298947772248468499227931298875993609567963371911321668062594560962315466598699214143499127129305517281239879221129816676914768369286641633684932154678297478467908822276077024075470452200990253910207975597821724221987349846658194927905863068516723651831130186465341698794467009529482132161048379780552245037630243771798218160532223724334152540303579279535265731808587622212958564030690807938967900339099741691385629833829458272607895396791441361939812686027761804708255061121427664731970015026320564252365147233670800512675417342206104625276046668632740608449361575822401670992349878542917278652693811388627953678313273910795680331978637134886752749025784012968400006139116942727703545153518030155203660431040874006516527737878577276974401154539331607820330247083025965839023870803322679295085035504454140439351739632874015690542441168793394464376478811151183819834424506571035603059758733941047621363521961047300727425256940999230739320209822215214997411647876175651902803071734432792428090161883722353241892953800061868472577347553737605615552829322082043175792352788679898746045356753047947411346650757037449478778641117995515732426279247470384369689441777761097691553840834238653895859997724765127679912709966727627964539274579068747943320632490019097518671482926043642073916506550252528226002266360862532605147552117273827948880366536177220695538219022945012585813618669202872872714371103863302952300735496070224799689478069360835474567765702609428999757777252023074431949
    n2 = 149241408443620494002470591738785505370502368296963181946728631840038795474906581033243823796291571451745331328752119009368516319243130244307556449321324029964666970399347267693879959669374580590066438039996349054574500863130654637189827898958752400538756192110219340577346886925285675990099892159951190019011269133810340134971935312770873534027861712396419031732753387963121177239521123790642193979061320194549926884547798519241920907632009271605466761700204504943841688795622023703195424558866169026355946281708054556788789371917734358798427996219318307081186498209022658682492076958921316788010019314605582085531122980357726402316514046569434269493612350411354159988669610034118210076043214399495480215814659120598643940791895710433892738436884819137363431670473275553652366682763772561025048858911918671966837698642531610505399917697263281959655421105781229947038323864367148772662128450576272662701347984459463940268048254075808509133124053501608277686736778793270107810160132371288441018059002146003853564114714319513216629383231073875444081017640962948245586400403901628994418029848172234398690394481120418222434722658063121864284872235893819030343598122480922461751745832786165844986197378911603674324140715478214685505181949865892449910305881851738632396827291277836620030333268022957593718993945988216873412407620751581853620583286798145717464399546377202244228970061583102537003914240332925663653142029055482955505671489266949660854424512939109829981259306491028978065543646719350190430058022894003806491088366396076325944411041313740634229978662528142861018645760416426121999535442912780962169652294203442539736481609522813673403929102320447743908214426402475741238215520872973203834276124891622770874971853660675888956274745377680689896839539213365798719182593169151660880773997915764366477235391227598798345635110170169820363631284891070491955798713331001324002610888304310427809677379177273736531042334467213485656887162852420236110466680252546476471990793360067389780410291148116904442434984373621134130455640151294392900736499663043057839903764156334292406031400787491642838829935411300246461614570407411586669553219422965550836965155181077712338122028483130477415972804847812775963631682300721726834142573919461560243703506074401687391907699607626139157244611767463678951635248463096122490802262410748762169600847498550857967210191814512661931320953809307217143334840103522867744282032466867
    common_factor = math.gcd(n1, n2)
    print("Common factor: ", common_factor)
    factor2 = n1 // common_factor
    factor3 = n2 // common_factor
    print("Factor number 2: ", factor2)
    print("Factor number 3: ", factor3)
    print("Sum: ", sum([common_factor, factor2, factor3]))

    print("---------------------------------------------------------")

    n = 45540658611371046587865371195165449628901047545914580604865453481603198640642211112355473628523282850749859033940392976983341665705059877318294575923365187755402165099212637479132584388991968821117756707387524244889860253867734221471662237277995027610971533433113796829932950371734544013123971957779257501203019272456889432709812235379568689104052348267305443763036008451525289960658522730334066064604156885952755088210332806461730285823013268459440265592179550310020004352798562348629775029769678014085584111515702738905181763592097169694119964347949983520255467549838731575869493071237311742675850357567052827188102427371868677387040024569851953515850522728712281402633472462500077970501817333607746900868961057223820332081771501345688641152066477618952598270753363405117365065554156955202185446822968594023182576315369641047829078245784484457772868485186007659420129545576132876793265939442360535498808332054789989271659604486522918925427176408656820397513249030614899734971310072759749466463552804077652723438491108069861083666463859410332065437276950219661722030316819275095622845271886717896532957851778617575757968529363392910554518003974266972338429625737379098678080537736889029356998094597760076613609855876908217629177428749796853087625005986234079819672090036008789659246286325742220230675358676133046788476113428060007246035931267254999456846913745934400769953653518054546813687676092888255307974278482877646227831407857433201317288271588533850603484653264774411987994477559147521148774809906543532810543818908064442364080189519032941007638630639189751491379212804642691886135459092813764259702830717483486589598674141811112765716756571695831263563902368380760642828457039278158029582819830816991665182222363112974307825940934273488835488542486669602201751512869131179495270905805096460508877918578539058935802476842052756771801639070186742054937969040457017706865955950416705799895151008598667277079734570268496025183946187477360848011308509144479176441045516101974591475038283720720206315980880582207992853357230607063214110938256001190323833257275948530002187172512259391487051312797381163099921000996160632670688594095205861487635354089113949941149151710146261870526398595914007398999339487843615972891291047891606315547117541475608791707355800091344535126178319146054048142385520332357456528415148288595028440770487308045245078723583242511406308862547794955995015090185292291125385510902261
    print("N: ", n)
    # plus one so we get the ceiling in this case
    n_sqr = isqrt(n) + 1
    print("N squared: ", n_sqr)

    last = (n_sqr * n_sqr) - n
    d = int(math.sqrt(last))
    print(d)

    print("D: ", d)
    q = n_sqr + d
    p = n_sqr - d
    print("q = {}\np = {}".format(q, p))
    if p * q == n:
        print("Sum: ", p + q)

    print("--------------------------------------------------------------")

    # n = 74689026523810008490866994150982137737139351476502191827221648444901861919063171278921268192192038781175256156480327390188859695699082563028083894213561137646344509143926955394180040978234386824989356186938873127406619516582396910356617448044362589737369923488825313515834898653395100782643054040194382482814266172648896237752795997757635506774588306997341940538090368692185704986797030479422781082643536153796942495558884670533647096297775864129537180035422764627296628042701005508552775297449574094227086541424241213260219580323923915979979928273217275516996396139082171775943939693700183335853715473678002341559687757700066707835159480136002531438110622339014953916328793080463793067129271318678828773440166907902278005331865117350858415361400911895918995052306477879366150381771005953479186943754773065832499518513607372974464039109944058924039512374222207942261960081364983188535371670493016164390980239110951956952834173246947949557811653585774846784787039146621881660781703329665358382498176397293043185839622531663139030686512087365448232943548268461833407940989213642570525481661766140536619398975254768267879231927949796517266503491811754442644837701898571523587547109228980568807488576078254304379795273293094930000089706689956952256982026773096281895150562370128972274159818921002859330999527914310827670699901790262044738283226772512852964781861432402088015801087470258716104485045365906533987594200920162797918923832017654844966310666193241499952095893287962354465747344155862341350339115721771934798682343094108544677506011435366102637136602537218087573281637114563101244718038230524387992609214815125964726574889527582330793949725595162792070591538995968296726734868999366911741633529505179366071949895781427289553194181341347214009610945332515480542511414929196851544678423336736032999498772809376881640314685100509871459889525280187299382823715298797185324032803667454177525996713770776121643280294898336879517360316123995785607435094221610306322886320895247207323360824227142375265831281864192183532788458084386260847545543318328949048095326639707679686026328700856503266191112354836844083955627976190721043497587034161979497162068010420005873074812748848761106775815237704451189732287181829741622959924933432016660631405940803758716685565186431145548364141451266726485684849300646711171746137084425628989811783415484295787690247379621298470565196088722443282047378700600644790412901144651
    # e = 61081803013294670511747423655428835710994509211174192989443208537696858238058210259100234161700018305770352262592083033786937782700602214060568698031000268535584377674907875370937011057940742846940496660489289798090428582213494602645518285628711862275762474629640075492035309077266175368012902254437134200611742407246006667443912754331872028508158713952611755118522961137989115297985869007576820128655234798580687779066624694496193988387285261520629910496966674711881704850839395124322165823394810208311522294812001195148643670796942858653746228922995366938102711661755894438066874193230920943264197648373877888489599975743271039436115452796003091502981097551126751337712868621417326918403619171451568213279814141869798110250220239845783543323641872235444992322412470922280493170997556800194011623146352054401969445024828180114497333173421369947639821303657104445515682505466210762964222196967831484037309019012163143021953768995890085308888378240617977128235980676180122865638168282085730784402530658248941688151771025885476055131803146078280013878632432413973010509161956180286452271551120448172607740691605460732820392339979617804713815687454595011087735636752627053774106939082341534032733869132144774098227061708973075352895080153316731573912685556072714673424784458538271929720506380288160830099693052043009692772638125683740377453700073507117613378336236398176162506660415401460975186353336492080630709248478171375112066877422451290215103617363349448272876477052990119936827421291523289985032433161472353592600935524807657992100207972110256427740772299029026259231030801791136798938037223385357088567115257687317527029461128493851747168049458222253850770774918723886280564987491460997680892316520331325102043549597296354212602907736158761742325741198601233318312120028008025940070344798849616770892448762529884893494627078212296727846570678671469213864282206819453404240056100527394739715951977121369528107045281401556958724772503078455061069321219417653833528854456727961993015162418408164484453875775307239936425221213753021755119832533421001971963806173233947013874016626048506353526669473315382312410924807722263030772402053265027963157566992175413377214513664190591228128161175531335059012067269287963387036857694742874251893096451837990698879255289476531808580439703071297201976267545908665281757183179935416337410136338978197917843476401544601714254826608354629919969014760767388776454887401361
    #
    # file = open("rasMessage1.txt", "r")
    # lines = file.read()
    # data = lines.split()
    #
    # possible_output = {pow(i, e, n) : chr(i + 65) for i in range(26)}
    # text = ""
    # for d in data:
    #     text += possible_output[int(d)]
    #
    # pre = "CRYPTOFLAGZ"
    # pre_index = text.find(pre)
    # post_index = text.find("Z", pre_index + len(pre))
    # flag = text[pre_index: post_index + 1]
    # print("Flag: ", flag)

    # print("-------------------------------------------------------")
    # n = 93512279550262304215332191509694877769512712617178660953825102143132252369542398085000904639221612094478456633091089657379767745844517051773088505946411858966017535309802962833789688929660067989113229421614248173601806657381845777514960276355927374675330629815792548560525145484725089670423698082854955686758634325477507343620061980519698251815075515910536598611749025279318665348697552890986724088061934086060960887509326863713051707995387533741505915677843115379981672157386709369145698315766672452798590838210489220830003052608737232078878934694291409741875584155111293346956550662084834271520496444865770278214461521843366958995313185141323345400662700100159129622839232117641036880991732047035443266826203094207953989038425220844311330278661305663242234747515251573259853908001888560130014453597304864979352916888308406158130293058291776760393108455824681068266294884403939387812388429701444400006826453913894547410238007137329645044472969487892332709352875504974747222616336523225680057250290103312899015521155929650847504415855631260102502358441049583609905667744405194903913005785454065161303259889893524969829548578760874789221504904865639176227915361626209540712932278969847364391749829988564881563505077156979228659815151967332791163319203475153876147968525111727882661613553695667725821180930057591475198545387768302889210192388949165691888625541861334130463429148481049422843030778122395165141845691922436634274114623449447606752130275602744265504908323629611066115190107679523448966979983710311458660497080449508172960736688442367078734808792270138783877877920093031587500895458596825440302198725592009758570466186180961590110493262331105460061187180593386837528475431394810927512776834960216221301657883668928049267674705412867919590010958605140956603342488458362403001719097150193627064843350850559968368094751486083057572113035544229859882556116032727162922279423647843910424185896875464705240999419298991154018934251303523884560296290379544708611337736481873898804059924149131651595296245390639837594965875271941606515883208531827106492148339455673223923611304715520655591345664204870880771755979253454297780978809467279429273964265596410604690822259640239453401119154417930971424832084658815110194014323813327143850154960335332022632990865518463716592666125561992209206664819279872517077488729432765744835505831512542071237183470010957598297118343944896246976773178816310336379929488426257
    # e = 46047902927387615466486331184079980048250437177058769039299430546489937285638710471437116686864570625090540824842752997486158524529491190372610592388919497115531269901526560910673146444202602887797546194014244432773096194340172121581669572595145462662330889653722351846610845285761206470981605724727077368292658502733719197768324336327953704155416227003955837057213433630515100762488647610548102396528787268668642411767171900208874714498575797678008724255033989820958619089075562850839140809562448861124474193606267196260722350418338101612515676793826361861873876104491204221011494971862480150969459573083999560442207249887765740439270294968210003209124438017965237976531236120106889747362264689893784388851881901152722325575928211244130563140151707033877165250587105607295957888956999526873949034913778042385431789792545048400491029555220740457521930011791733505728258624752603067082483832432946601085038386201324532270186889494006379655758518688260158526411349359291361275825399476065326495651871761745063816686425011078914902637520279025499570914501348567692835177915496573767652276913677810260014411150782208450417447533856286855275441416176724443809753666171105764888090080575297715442861907777486326499805114919293521530767702415910470215366050485870974774555271939525725450108530242913227121614584018164144103823879623884613646016964644585334090531463324593699240050214221784045196822367383042306283476238368310382223950321544365640247910870849611727538265201217184918270881718933646520158246772971417485223283733258496398541607175372779014983158120964560037060347798084182677060776585915086914071888746075613210926699665100952472143435362068088838933161879309048416948414469774801372743541961194403267810481950955664863076031920822476378691170138109287093070922946017516592033274332785266873815454302796363817269275268754176182481606633175428928233165040306353610473978584983130960115982911150034734579880906483702748026901834549381212928210856306694318836118451516618661322573713831482013759991825228689087957910820390701533299135959689171480194531286433107799825853184399618840971193976259344978819107848656390777203721108218539483905660050691073489390589116103337036752916996113168802559818654750367512832177084344980619902428979925235051568328303734621446377115710505700040455072773118829892667974629692975399896059620235464101380014053157755267382925377422761003250157485347133732668177673779623
    # d = 12759265762063285047631214391273864047994778301231113206193982272838624286212297197371853376980849246570176463908438281179781798402136654438727950057056490988289977334118282754325741934008935293918895926439442792740800980577035798962741467861395949054813849104838810705578770659899329843833318425794542173492777516282776001272099992765894133979154575983596725541141439036871517174451811052158620354449611481448641176385704153876662577249009515265235367801170636723514132713654535902480216393235309033689597984679826328057893025925232713001595825763502013661305173640738100602008191755171986467987850515799969096846332464746300877480397384891310101935356196842203515683786472335379015689630186658835333808465501435823015926523967971526367418014427498764949658905902172198897446186293535583752636662679423800394116181844493364795528087777667019820405311651580223328710397735137391263983845438321900249314933396542239937490205167231062006970925518885506058672938301539228607726329102938035455364093209035400155061687533607209847430039244470977950139013988109687595842223376536886842157998657682339984157177857597613770468566276543662661298237240177536496851314602022230216731441720792645711743585651541209982425404248065464994362462343997122266749958941830718093394940822047169604996336369366134993951235534238540357989391830713562682375909709848621768318308697948283108606329643603692519699793990630659256553973515223872175582274245631316912546298954836965480416331914034000137742511990287935006332482287203400633692053619498552366428072800384511361046063356819805737585271086084584008962581730242832350745287556245596506007568464312892742382258824734012472910069658497299176054648772541526731303362419220796192643057024932747515638051810185584367827437556819414191797831767999543810939109175643546430634852484089616746880027542285149058376533268280048862577082861873576932728798398448820623025806366326470423382329762589696164275579280789667670973171313149970161980723732675236738446540577458006314791787243581305534272066323869025807516596621759562652786851592328766583831164768739511960146609437436253139866120488055641300904417657044717925664924435428032720710606483150733522666600039747580010559650192410966808476038068854716141099322261504123270274333027466586545924462445144948616590915247666040663386941357929974811356775108614619858639349052712527759938411580616833536753453788390127126042588576895387
    # primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281]
    #
    # p, q = factor_n(n, e, d, primes)
    # print("p and q = \n{}\n{}".format(p, q))
    # if n == (p * q):
    #     print("Correct p and q. Sum = ", p + q)
    # print("------------------------------------")

    n1, n2, n3 = 262063, 9420457, 181937053
    p1, iteration1 = pollard_rho(n1)
    q1 = n1 // p1
    print("q and p = {} and {}".format(p1, q1))
    if n1 == p1 * q1:
        print("CORRECT p and q factors of", n1)

    p2, iteration2 = pollard_rho(n2)
    q2 = n2 // p2
    print("q and p = {} and {}".format(p2, q2))
    if n2 == p2 * q2:
        print("CORRECT p and q factors of", n2)

    p3, iteration3 = pollard_rho(n3)
    q3 = n3 // p3
    print("q and p = {} and {}".format(p3, q3))
    if n3 == p3 * q3:
        print("CORRECT p and q factors of", n3)

    print("Total sum of iteration =", iteration1 + iteration2 + iteration3)


