
import java.io.File;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import java.util.Scanner;
import java.util.Set;
import javax.swing.filechooser.FileNameExtensionFilter;

// This class contains the entry point of our program and is the top level
// window (i.e. frame). While it has some supporting "view" components, it will
// be acting as the "controller" for our maze view and model.
public class Searcher extends javax.swing.JFrame
{
    private Maze maze;
    private Thread searchThread = null;
    
    public Searcher()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mazePanel = new MazePanel();
        topPanel = new javax.swing.JPanel();
        sleepLabel = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        seachComboBox = new javax.swing.JComboBox<String>();
        sleepTextField = new javax.swing.JTextField();
        seachLabel = new javax.swing.JLabel();
        seachButton = new javax.swing.JButton();
        cycleCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Search Demo");
        setPreferredSize(new java.awt.Dimension(700, 700));

        javax.swing.GroupLayout mazePanelLayout = new javax.swing.GroupLayout(mazePanel);
        mazePanel.setLayout(mazePanelLayout);
        mazePanelLayout.setHorizontalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        mazePanelLayout.setVerticalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 776, Short.MAX_VALUE)
        );

        sleepLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sleepLabel.setText("Sleep time:");

        loadButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadButtonActionPerformed(evt);
            }
        });

        seachComboBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        seachComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Breadth-first", "Depth-first", "ID", "Best-first", "A*", "IDA*" }));

        sleepTextField.setColumns(3);
        sleepTextField.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        sleepTextField.setText("30");
        sleepTextField.setInputVerifier(new IntegerVerifier(0,500));

        seachLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        seachLabel.setText("Search Type:");

        seachButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        seachButton.setText("Search");
        seachButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                seachButtonActionPerformed(evt);
            }
        });

        cycleCheckBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        cycleCheckBox.setSelected(true);
        cycleCheckBox.setText("cycle checking");

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(seachLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seachComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cycleCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sleepLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sleepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(loadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(seachButton)
                .addContainerGap())
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(seachLabel)
                    .addComponent(seachComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cycleCheckBox)
                    .addComponent(sleepLabel)
                    .addComponent(loadButton)
                    .addComponent(seachButton)
                    .addComponent(sleepTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 81, Short.MAX_VALUE)
                        .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 81, Short.MAX_VALUE))
                    .addComponent(mazePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mazePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("CallToThreadStopSuspendOrResumeManager")
    private void seachButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_seachButtonActionPerformed
    {//GEN-HEADEREND:event_seachButtonActionPerformed
        // If a search is currently running, stop it. Stop is deprecated.
        // However, there are no synchronized code blocks to worry about and
        // interrupting the thread in the preferred way adds another
        // complication for this demo.
        if (searchThread != null) searchThread.stop();

        if(maze == null) return;
        
        // Make a new thread that invokes search.
        searchThread = new Thread() {

                @Override
                public void run() {
                    
                    // Configure the Node class for this search.
                    String searchType = seachComboBox.getSelectedItem().toString();
                    Node.setMaze(maze);
                    switch(searchType)
                    {
                        case "A*":
                        case "IDA*":
                            Node.setUseAStarHeuristic(true);
                            break;
                        default:
                            Node.setUseAStarHeuristic(false);
                            break;
                    }
                    
                    // Start a new search
                    String path = Searcher.this.search(searchType,
                            cycleCheckBox.isSelected(),
                            Integer.parseInt(sleepTextField.getText()));
                    
                    // Show the found path
                    Searcher.this.drawPath(path, 0, maze.getStartRow(), maze.getStartCol());
                }
            };
        searchThread.start();
    }//GEN-LAST:event_seachButtonActionPerformed

    @SuppressWarnings("CallToThreadStopSuspendOrResumeManager")
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_loadButtonActionPerformed
    {//GEN-HEADEREND:event_loadButtonActionPerformed
        // If a search is currently running, stop it. Stop is deprecated.
        // However, there are no synchronized code blocks to worry about and
        // interrupting the thread in the preferred way adds another
        // complication for this demo.
        if (searchThread != null) searchThread.stop();
        
        // Use a file chooser dialog box to get a file name from the user.
        JFileChooser chooser = new JFileChooser();
        chooser.setFileFilter(new FileNameExtensionFilter("Maze Data (.dat)", "dat"));
        chooser.showOpenDialog(this);

        // Try to open and read the file
        try
        {
            String filename = chooser.getSelectedFile().getPath();
            if(filename == null) return;
            Scanner fin = new Scanner(new File(filename));
            maze = new Maze(fin);
            mazePanel.setMaze(maze);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error",
                                                JOptionPane.WARNING_MESSAGE);           
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Searcher.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() ->
        {
            new Searcher().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cycleCheckBox;
    private javax.swing.JButton loadButton;
    private MazePanel mazePanel;
    private javax.swing.JButton seachButton;
    private javax.swing.JComboBox<String> seachComboBox;
    private javax.swing.JLabel seachLabel;
    private javax.swing.JLabel sleepLabel;
    private javax.swing.JTextField sleepTextField;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables

    private void drawPath(String path, int index, int row, int col)
    {
        maze.setOnPath(row, col);
 
        if (path.length() <= index) return;
 
        switch (path.charAt(index)) {
            case 'U':
                drawPath(path, index + 1, row - 1, col);
                break;
            case 'D':
                drawPath(path, index + 1, row + 1, col);
                break;
            case 'L':
                drawPath(path, index + 1, row, col - 1);
                break;
            case 'R':
                drawPath(path, index + 1, row, col + 1);
                break;
        }    }

    private String search(String searchType, boolean cycleChecking, int sleepTime)
    {
        // Cutoff for ID and IDA*
        int cutoff = 1;
        boolean useCuttoff = false;
        
        while(true)
        {
            // Clear any old status information
            for(int row = 1; row < maze.getNumberOfRows(); row++)
            {
                for(int col = 1; col < maze.getNumberOfColumns(); col++)
                {
                    maze.clearAll(row, col);
                }
            }

            int nextCutoff = Integer.MAX_VALUE;

            // Setup open list and closed list (I am not a fan of hard coding
            // the search type names, but it is easy (I know...) and this is
            // just for a demo.
            Collection openList;
            switch(searchType)
            {
                case "ID":
                case "IDA*":
                    useCuttoff = true;
                case "Depth-first":
                case "Breadth-first":
                    openList = new LinkedList<>();
                    break;
                case "Best-first":
                case "A*":
                    openList = new PriorityQueue<>();
                    break;
                default:
                    throw new IllegalArgumentException("Unknown Search type");
            }
            
            // Add the start
            openList.add(new Node(maze.getStartRow(), maze.getStartCol()));
            
            // Make space for cycleChecking (will only be used if cycleChecking
            // is true). 
            Set<Node> closedList = new HashSet<>(maze.getNumberOfColumns() * maze.getNumberOfRows());

            // If the open list is empty the search fails.
            while (!openList.isEmpty())
            {
                // Pick a node from the open list and remove it from the list.
                Node n;
                if(openList instanceof PriorityQueue)
                    n = ((PriorityQueue<Node>)openList).poll();
                else
                    n = ((LinkedList<Node>)openList).pollLast();
                
                // Show the current location
                maze.setCurrent(n.getRow(), n.getCol());
                pause((int) Math.ceil(sleepTime / 2.0));

                // If n is a goal node return its path from the start.
                if (n.isGoal()) return n.getPath();

                // Now that we have examined n, it is added to the closed list
                // if we are doing cycle checking.
                if(cycleChecking)
                {
                    closedList.add(n);
                    maze.setOnClosedList(n.getRow(), n.getCol());
                }

                // If we are using cutoffs and have met ours then do not expand
                // this node.
                if (useCuttoff && n.getPath().length() >= cutoff)
                {
                    nextCutoff = Math.min(nextCutoff, n.heuristic());
                    continue;
                }

                // Add the children of n to the list of nodes to be examined.
                for (Node child : n.getChildren())
                {
                    // If we have seen this node before (on the closed list) or
                    // are already planing on visiting this node (on the open
                    // list) skip it.
                    if (openList.contains(child) || closedList.contains(child)) continue;

                    if(searchType.equals("Breadth-first"))
                        ((LinkedList<Node>)openList).addFirst(child);
                    else
                        openList.add(child);
                    maze.setOnSearchList(child.getRow(), child.getCol());
                }

                // Pause to enjoy the nice animation
                pause((int) Math.floor(sleepTime / 2.0));
            }
            if(useCuttoff)
            {
                if(Node.useAStarHeuristic()) cutoff = nextCutoff;
                else cutoff++;
            }
            else
            {
                break;
            }
        }

        return null;
    }

    private void pause(int sleeptime)
    {
        try
        {
            Thread.sleep(sleeptime);
        } catch (InterruptedException ex)
        {
        }
    }
}
